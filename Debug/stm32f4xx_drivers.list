
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cb8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e7c  08000e7c  00020414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e7c  08000e7c  00020414  2**0
                  CONTENTS
  4 .ARM          00000000  08000e7c  08000e7c  00020414  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e7c  08000e7c  00020414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e7c  08000e7c  00010e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e80  08000e80  00010e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000414  20000000  08000e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000414  08001298  00020414  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08001298  00020440  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020414  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001cd0  00000000  00000000  0002043e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005de  00000000  00000000  0002210e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000168  00000000  00000000  000226f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000120  00000000  00000000  00022858  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002dab  00000000  00000000  00022978  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000018b9  00000000  00000000  00025723  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b368  00000000  00000000  00026fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00032344  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000494  00000000  00000000  000323c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000414 	.word	0x20000414
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000e64 	.word	0x08000e64

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000418 	.word	0x20000418
 8000200:	08000e64 	.word	0x08000e64

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <delay>:
#include <string.h>
#include "stm32f446xx.h"


void delay(void)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i++);
 800021a:	2300      	movs	r3, #0
 800021c:	607b      	str	r3, [r7, #4]
 800021e:	e002      	b.n	8000226 <delay+0x12>
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3301      	adds	r3, #1
 8000224:	607b      	str	r3, [r7, #4]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a03      	ldr	r2, [pc, #12]	; (8000238 <delay+0x24>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d9f8      	bls.n	8000220 <delay+0xc>
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	0003d08f 	.word	0x0003d08f

0800023c <USART2_Init>:

char msg[1024] = "UART Tx testing...\n\r";
USART_Handle_t usart2_handle;

void USART2_Init(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 8000240:	4b0d      	ldr	r3, [pc, #52]	; (8000278 <USART2_Init+0x3c>)
 8000242:	4a0e      	ldr	r2, [pc, #56]	; (800027c <USART2_Init+0x40>)
 8000244:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_9600;
 8000246:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <USART2_Init+0x3c>)
 8000248:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800024c:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 800024e:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <USART2_Init+0x3c>)
 8000250:	2200      	movs	r2, #0
 8000252:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 8000254:	4b08      	ldr	r3, [pc, #32]	; (8000278 <USART2_Init+0x3c>)
 8000256:	2200      	movs	r2, #0
 8000258:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 800025a:	4b07      	ldr	r3, [pc, #28]	; (8000278 <USART2_Init+0x3c>)
 800025c:	2200      	movs	r2, #0
 800025e:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000260:	4b05      	ldr	r3, [pc, #20]	; (8000278 <USART2_Init+0x3c>)
 8000262:	2200      	movs	r2, #0
 8000264:	739a      	strb	r2, [r3, #14]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000266:	4b04      	ldr	r3, [pc, #16]	; (8000278 <USART2_Init+0x3c>)
 8000268:	2200      	movs	r2, #0
 800026a:	735a      	strb	r2, [r3, #13]

	USART_Init(&usart2_handle);
 800026c:	4802      	ldr	r0, [pc, #8]	; (8000278 <USART2_Init+0x3c>)
 800026e:	f000 fcf5 	bl	8000c5c <USART_Init>
}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	20000430 	.word	0x20000430
 800027c:	40004400 	.word	0x40004400

08000280 <USART2_GPIOInit>:

void USART2_GPIOInit(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 8000286:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <USART2_GPIOInit+0x40>)
 8000288:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800028a:	2302      	movs	r3, #2
 800028c:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_TYPE_PP;
 800028e:	2300      	movs	r3, #0
 8000290:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU;
 8000292:	2301      	movs	r3, #1
 8000294:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000296:	2302      	movs	r3, #2
 8000298:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 800029a:	2307      	movs	r3, #7
 800029c:	737b      	strb	r3, [r7, #13]

	//USART2 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 800029e:	2302      	movs	r3, #2
 80002a0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f87b 	bl	80003a0 <GPIO_Init>

	//USART2 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 80002aa:	2303      	movs	r3, #3
 80002ac:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 f875 	bl	80003a0 <GPIO_Init>
}
 80002b6:	bf00      	nop
 80002b8:	3710      	adds	r7, #16
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40020000 	.word	0x40020000

080002c4 <GPIO_Button_Init>:

void GPIO_Button_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
	    GPIO_Handle_t GpioBtn;
		GpioBtn.pGPIOx = GPIOC;
 80002ca:	4b0b      	ldr	r3, [pc, #44]	; (80002f8 <GPIO_Button_Init+0x34>)
 80002cc:	607b      	str	r3, [r7, #4]
		GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002ce:	230d      	movs	r3, #13
 80002d0:	723b      	strb	r3, [r7, #8]
		GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002d2:	2300      	movs	r3, #0
 80002d4:	727b      	strb	r3, [r7, #9]
		GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002d6:	2302      	movs	r3, #2
 80002d8:	72bb      	strb	r3, [r7, #10]
		GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002da:	2300      	movs	r3, #0
 80002dc:	72fb      	strb	r3, [r7, #11]

		GPIO_PeriClockControl(GPIOC, ENABLE);
 80002de:	2101      	movs	r1, #1
 80002e0:	4805      	ldr	r0, [pc, #20]	; (80002f8 <GPIO_Button_Init+0x34>)
 80002e2:	f000 f9f7 	bl	80006d4 <GPIO_PeriClockControl>
		GPIO_Init(&GpioBtn);
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 f859 	bl	80003a0 <GPIO_Init>
}
 80002ee:	bf00      	nop
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40020800 	.word	0x40020800

080002fc <main>:

int main(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	GPIO_Button_Init();
 8000300:	f7ff ffe0 	bl	80002c4 <GPIO_Button_Init>

	USART2_GPIOInit();
 8000304:	f7ff ffbc 	bl	8000280 <USART2_GPIOInit>

	USART2_Init();
 8000308:	f7ff ff98 	bl	800023c <USART2_Init>

	USART_PeripheralControl(USART2,ENABLE);
 800030c:	2101      	movs	r1, #1
 800030e:	480b      	ldr	r0, [pc, #44]	; (800033c <main+0x40>)
 8000310:	f000 fbe8 	bl	8000ae4 <USART_PeripheralControl>

	while(1)
	{
		while(GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13));
 8000314:	bf00      	nop
 8000316:	210d      	movs	r1, #13
 8000318:	4809      	ldr	r0, [pc, #36]	; (8000340 <main+0x44>)
 800031a:	f000 faab 	bl	8000874 <GPIO_ReadFromInputPin>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d1f8      	bne.n	8000316 <main+0x1a>

		delay();
 8000324:	f7ff ff76 	bl	8000214 <delay>

		USART_SendData(&usart2_handle,(uint8_t*)msg,strlen(msg));
 8000328:	4806      	ldr	r0, [pc, #24]	; (8000344 <main+0x48>)
 800032a:	f7ff ff6b 	bl	8000204 <strlen>
 800032e:	4603      	mov	r3, r0
 8000330:	461a      	mov	r2, r3
 8000332:	4904      	ldr	r1, [pc, #16]	; (8000344 <main+0x48>)
 8000334:	4804      	ldr	r0, [pc, #16]	; (8000348 <main+0x4c>)
 8000336:	f000 fd24 	bl	8000d82 <USART_SendData>
		while(GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13));
 800033a:	e7eb      	b.n	8000314 <main+0x18>
 800033c:	40004400 	.word	0x40004400
 8000340:	40020800 	.word	0x40020800
 8000344:	20000000 	.word	0x20000000
 8000348:	20000430 	.word	0x20000430

0800034c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800034c:	480d      	ldr	r0, [pc, #52]	; (8000384 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800034e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000350:	480d      	ldr	r0, [pc, #52]	; (8000388 <LoopForever+0x6>)
  ldr r1, =_edata
 8000352:	490e      	ldr	r1, [pc, #56]	; (800038c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000354:	4a0e      	ldr	r2, [pc, #56]	; (8000390 <LoopForever+0xe>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000358:	e002      	b.n	8000360 <LoopCopyDataInit>

0800035a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800035c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035e:	3304      	adds	r3, #4

08000360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000364:	d3f9      	bcc.n	800035a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000366:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000368:	4c0b      	ldr	r4, [pc, #44]	; (8000398 <LoopForever+0x16>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800036c:	e001      	b.n	8000372 <LoopFillZerobss>

0800036e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000370:	3204      	adds	r2, #4

08000372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000374:	d3fb      	bcc.n	800036e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000376:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800037a:	f000 fd4f 	bl	8000e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800037e:	f7ff ffbd 	bl	80002fc <main>

08000382 <LoopForever>:

LoopForever:
    b LoopForever
 8000382:	e7fe      	b.n	8000382 <LoopForever>
  ldr   r0, =_estack
 8000384:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800038c:	20000414 	.word	0x20000414
  ldr r2, =_sidata
 8000390:	08000e84 	.word	0x08000e84
  ldr r2, =_sbss
 8000394:	20000414 	.word	0x20000414
  ldr r4, =_ebss
 8000398:	20000440 	.word	0x20000440

0800039c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800039c:	e7fe      	b.n	800039c <ADC_IRQHandler>
	...

080003a0 <GPIO_Init>:
 * @return            -
 *
 * @Note              -
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b086      	sub	sp, #24
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
	uint32_t temp=0; //temp register
 80003a8:	2300      	movs	r3, #0
 80003aa:	617b      	str	r3, [r7, #20]

	// enable peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2101      	movs	r1, #1
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 f98e 	bl	80006d4 <GPIO_PeriClockControl>

    //1. configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	795b      	ldrb	r3, [r3, #5]
 80003bc:	2b03      	cmp	r3, #3
 80003be:	d820      	bhi.n	8000402 <GPIO_Init+0x62>
	{
		// the non interrupt mode of gpio pin


		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	795b      	ldrb	r3, [r3, #5]
 80003c4:	461a      	mov	r2, r3
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	791b      	ldrb	r3, [r3, #4]
 80003ca:	005b      	lsls	r3, r3, #1
 80003cc:	fa02 f303 	lsl.w	r3, r2, r3
 80003d0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); // clearing
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	791b      	ldrb	r3, [r3, #4]
 80003dc:	005b      	lsls	r3, r3, #1
 80003de:	2103      	movs	r1, #3
 80003e0:	fa01 f303 	lsl.w	r3, r1, r3
 80003e4:	43db      	mvns	r3, r3
 80003e6:	4619      	mov	r1, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	400a      	ands	r2, r1
 80003ee:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;    // setting
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	6819      	ldr	r1, [r3, #0]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	697a      	ldr	r2, [r7, #20]
 80003fc:	430a      	orrs	r2, r1
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	e0c1      	b.n	8000586 <GPIO_Init+0x1e6>
	}
	else
	{
		//interrupt mode

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	795b      	ldrb	r3, [r3, #5]
 8000406:	2b04      	cmp	r3, #4
 8000408:	d117      	bne.n	800043a <GPIO_Init+0x9a>
		{//1. configure FSTR
			EXTI->EXTI_FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800040a:	4b47      	ldr	r3, [pc, #284]	; (8000528 <GPIO_Init+0x188>)
 800040c:	68db      	ldr	r3, [r3, #12]
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	7912      	ldrb	r2, [r2, #4]
 8000412:	4611      	mov	r1, r2
 8000414:	2201      	movs	r2, #1
 8000416:	408a      	lsls	r2, r1
 8000418:	4611      	mov	r1, r2
 800041a:	4a43      	ldr	r2, [pc, #268]	; (8000528 <GPIO_Init+0x188>)
 800041c:	430b      	orrs	r3, r1
 800041e:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RSTR bit
			EXTI->EXTI_RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000420:	4b41      	ldr	r3, [pc, #260]	; (8000528 <GPIO_Init+0x188>)
 8000422:	689b      	ldr	r3, [r3, #8]
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	7912      	ldrb	r2, [r2, #4]
 8000428:	4611      	mov	r1, r2
 800042a:	2201      	movs	r2, #1
 800042c:	408a      	lsls	r2, r1
 800042e:	43d2      	mvns	r2, r2
 8000430:	4611      	mov	r1, r2
 8000432:	4a3d      	ldr	r2, [pc, #244]	; (8000528 <GPIO_Init+0x188>)
 8000434:	400b      	ands	r3, r1
 8000436:	6093      	str	r3, [r2, #8]
 8000438:	e035      	b.n	80004a6 <GPIO_Init+0x106>

		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	795b      	ldrb	r3, [r3, #5]
 800043e:	2b05      	cmp	r3, #5
 8000440:	d117      	bne.n	8000472 <GPIO_Init+0xd2>
		{ //2. configure RSTR
			EXTI->EXTI_RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000442:	4b39      	ldr	r3, [pc, #228]	; (8000528 <GPIO_Init+0x188>)
 8000444:	689b      	ldr	r3, [r3, #8]
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	7912      	ldrb	r2, [r2, #4]
 800044a:	4611      	mov	r1, r2
 800044c:	2201      	movs	r2, #1
 800044e:	408a      	lsls	r2, r1
 8000450:	4611      	mov	r1, r2
 8000452:	4a35      	ldr	r2, [pc, #212]	; (8000528 <GPIO_Init+0x188>)
 8000454:	430b      	orrs	r3, r1
 8000456:	6093      	str	r3, [r2, #8]
			// clear the corresponding FSTR bit
			EXTI->EXTI_FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000458:	4b33      	ldr	r3, [pc, #204]	; (8000528 <GPIO_Init+0x188>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	7912      	ldrb	r2, [r2, #4]
 8000460:	4611      	mov	r1, r2
 8000462:	2201      	movs	r2, #1
 8000464:	408a      	lsls	r2, r1
 8000466:	43d2      	mvns	r2, r2
 8000468:	4611      	mov	r1, r2
 800046a:	4a2f      	ldr	r2, [pc, #188]	; (8000528 <GPIO_Init+0x188>)
 800046c:	400b      	ands	r3, r1
 800046e:	60d3      	str	r3, [r2, #12]
 8000470:	e019      	b.n	80004a6 <GPIO_Init+0x106>

		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	795b      	ldrb	r3, [r3, #5]
 8000476:	2b06      	cmp	r3, #6
 8000478:	d115      	bne.n	80004a6 <GPIO_Init+0x106>
		{ //3. configure RSTR and FSTR
			EXTI->EXTI_FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800047a:	4b2b      	ldr	r3, [pc, #172]	; (8000528 <GPIO_Init+0x188>)
 800047c:	68db      	ldr	r3, [r3, #12]
 800047e:	687a      	ldr	r2, [r7, #4]
 8000480:	7912      	ldrb	r2, [r2, #4]
 8000482:	4611      	mov	r1, r2
 8000484:	2201      	movs	r2, #1
 8000486:	408a      	lsls	r2, r1
 8000488:	4611      	mov	r1, r2
 800048a:	4a27      	ldr	r2, [pc, #156]	; (8000528 <GPIO_Init+0x188>)
 800048c:	430b      	orrs	r3, r1
 800048e:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000490:	4b25      	ldr	r3, [pc, #148]	; (8000528 <GPIO_Init+0x188>)
 8000492:	689b      	ldr	r3, [r3, #8]
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	7912      	ldrb	r2, [r2, #4]
 8000498:	4611      	mov	r1, r2
 800049a:	2201      	movs	r2, #1
 800049c:	408a      	lsls	r2, r1
 800049e:	4611      	mov	r1, r2
 80004a0:	4a21      	ldr	r2, [pc, #132]	; (8000528 <GPIO_Init+0x188>)
 80004a2:	430b      	orrs	r3, r1
 80004a4:	6093      	str	r3, [r2, #8]

		}

		//2- configure GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	791b      	ldrb	r3, [r3, #4]
 80004aa:	089b      	lsrs	r3, r3, #2
 80004ac:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	791b      	ldrb	r3, [r3, #4]
 80004b2:	f003 0303 	and.w	r3, r3, #3
 80004b6:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a1b      	ldr	r2, [pc, #108]	; (800052c <GPIO_Init+0x18c>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d044      	beq.n	800054c <GPIO_Init+0x1ac>
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a1a      	ldr	r2, [pc, #104]	; (8000530 <GPIO_Init+0x190>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d02b      	beq.n	8000524 <GPIO_Init+0x184>
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a18      	ldr	r2, [pc, #96]	; (8000534 <GPIO_Init+0x194>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d024      	beq.n	8000520 <GPIO_Init+0x180>
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a17      	ldr	r2, [pc, #92]	; (8000538 <GPIO_Init+0x198>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d01d      	beq.n	800051c <GPIO_Init+0x17c>
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a15      	ldr	r2, [pc, #84]	; (800053c <GPIO_Init+0x19c>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d016      	beq.n	8000518 <GPIO_Init+0x178>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a14      	ldr	r2, [pc, #80]	; (8000540 <GPIO_Init+0x1a0>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d00f      	beq.n	8000514 <GPIO_Init+0x174>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a12      	ldr	r2, [pc, #72]	; (8000544 <GPIO_Init+0x1a4>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d008      	beq.n	8000510 <GPIO_Init+0x170>
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a11      	ldr	r2, [pc, #68]	; (8000548 <GPIO_Init+0x1a8>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d101      	bne.n	800050c <GPIO_Init+0x16c>
 8000508:	2307      	movs	r3, #7
 800050a:	e020      	b.n	800054e <GPIO_Init+0x1ae>
 800050c:	2300      	movs	r3, #0
 800050e:	e01e      	b.n	800054e <GPIO_Init+0x1ae>
 8000510:	2306      	movs	r3, #6
 8000512:	e01c      	b.n	800054e <GPIO_Init+0x1ae>
 8000514:	2305      	movs	r3, #5
 8000516:	e01a      	b.n	800054e <GPIO_Init+0x1ae>
 8000518:	2304      	movs	r3, #4
 800051a:	e018      	b.n	800054e <GPIO_Init+0x1ae>
 800051c:	2303      	movs	r3, #3
 800051e:	e016      	b.n	800054e <GPIO_Init+0x1ae>
 8000520:	2302      	movs	r3, #2
 8000522:	e014      	b.n	800054e <GPIO_Init+0x1ae>
 8000524:	2301      	movs	r3, #1
 8000526:	e012      	b.n	800054e <GPIO_Init+0x1ae>
 8000528:	40013c00 	.word	0x40013c00
 800052c:	40020000 	.word	0x40020000
 8000530:	40020400 	.word	0x40020400
 8000534:	40020800 	.word	0x40020800
 8000538:	40020c00 	.word	0x40020c00
 800053c:	40021000 	.word	0x40021000
 8000540:	40021400 	.word	0x40021400
 8000544:	40021800 	.word	0x40021800
 8000548:	40021c00 	.word	0x40021c00
 800054c:	2300      	movs	r3, #0
 800054e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000550:	4b5d      	ldr	r3, [pc, #372]	; (80006c8 <GPIO_Init+0x328>)
 8000552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000554:	4a5c      	ldr	r2, [pc, #368]	; (80006c8 <GPIO_Init+0x328>)
 8000556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055a:	6453      	str	r3, [r2, #68]	; 0x44
        SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 800055c:	7c7a      	ldrb	r2, [r7, #17]
 800055e:	7cbb      	ldrb	r3, [r7, #18]
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	fa02 f103 	lsl.w	r1, r2, r3
 8000566:	4a59      	ldr	r2, [pc, #356]	; (80006cc <GPIO_Init+0x32c>)
 8000568:	7cfb      	ldrb	r3, [r7, #19]
 800056a:	3302      	adds	r3, #2
 800056c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3- enable EXTI interrupt delivery using IMR
		EXTI->EXTI_IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000570:	4b57      	ldr	r3, [pc, #348]	; (80006d0 <GPIO_Init+0x330>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	7912      	ldrb	r2, [r2, #4]
 8000578:	4611      	mov	r1, r2
 800057a:	2201      	movs	r2, #1
 800057c:	408a      	lsls	r2, r1
 800057e:	4611      	mov	r1, r2
 8000580:	4a53      	ldr	r2, [pc, #332]	; (80006d0 <GPIO_Init+0x330>)
 8000582:	430b      	orrs	r3, r1
 8000584:	6013      	str	r3, [r2, #0]
	}

	temp =0;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	799b      	ldrb	r3, [r3, #6]
 800058e:	461a      	mov	r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	fa02 f303 	lsl.w	r3, r2, r3
 800059a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); // clearing
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	689a      	ldr	r2, [r3, #8]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	791b      	ldrb	r3, [r3, #4]
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	2103      	movs	r1, #3
 80005aa:	fa01 f303 	lsl.w	r3, r1, r3
 80005ae:	43db      	mvns	r3, r3
 80005b0:	4619      	mov	r1, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	400a      	ands	r2, r1
 80005b8:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	6899      	ldr	r1, [r3, #8]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	697a      	ldr	r2, [r7, #20]
 80005c6:	430a      	orrs	r2, r1
 80005c8:	609a      	str	r2, [r3, #8]

    temp = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]

	//3. configure the pupd settings
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	79db      	ldrb	r3, [r3, #7]
 80005d2:	461a      	mov	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	791b      	ldrb	r3, [r3, #4]
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); // clearing
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	68da      	ldr	r2, [r3, #12]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	2103      	movs	r1, #3
 80005ee:	fa01 f303 	lsl.w	r3, r1, r3
 80005f2:	43db      	mvns	r3, r3
 80005f4:	4619      	mov	r1, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	400a      	ands	r2, r1
 80005fc:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	68d9      	ldr	r1, [r3, #12]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	697a      	ldr	r2, [r7, #20]
 800060a:	430a      	orrs	r2, r1
 800060c:	60da      	str	r2, [r3, #12]

    temp = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]

	//4. configure the optype
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	7a1b      	ldrb	r3, [r3, #8]
 8000616:	461a      	mov	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	791b      	ldrb	r3, [r3, #4]
 800061c:	fa02 f303 	lsl.w	r3, r2, r3
 8000620:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ); // clearing
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	685a      	ldr	r2, [r3, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	4619      	mov	r1, r3
 800062e:	2301      	movs	r3, #1
 8000630:	408b      	lsls	r3, r1
 8000632:	43db      	mvns	r3, r3
 8000634:	4619      	mov	r1, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	400a      	ands	r2, r1
 800063c:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	6859      	ldr	r1, [r3, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	697a      	ldr	r2, [r7, #20]
 800064a:	430a      	orrs	r2, r1
 800064c:	605a      	str	r2, [r3, #4]

    temp = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	795b      	ldrb	r3, [r3, #5]
 8000656:	2b02      	cmp	r3, #2
 8000658:	d131      	bne.n	80006be <GPIO_Init+0x31e>
    {
    	uint8_t temp1, temp2;

    	temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;         //decide which register will store in (low or high)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	791b      	ldrb	r3, [r3, #4]
 800065e:	08db      	lsrs	r3, r3, #3
 8000660:	743b      	strb	r3, [r7, #16]
    	temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;         //store number of pin number
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	791b      	ldrb	r3, [r3, #4]
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	73fb      	strb	r3, [r7, #15]
    	pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));    // clearing
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	7c3a      	ldrb	r2, [r7, #16]
 8000672:	3208      	adds	r2, #8
 8000674:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	220f      	movs	r2, #15
 800067e:	fa02 f303 	lsl.w	r3, r2, r3
 8000682:	43db      	mvns	r3, r3
 8000684:	4618      	mov	r0, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	7c3a      	ldrb	r2, [r7, #16]
 800068c:	4001      	ands	r1, r0
 800068e:	3208      	adds	r2, #8
 8000690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    	pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));    // setting
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	7c3a      	ldrb	r2, [r7, #16]
 800069a:	3208      	adds	r2, #8
 800069c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	7a5b      	ldrb	r3, [r3, #9]
 80006a4:	461a      	mov	r2, r3
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	fa02 f303 	lsl.w	r3, r2, r3
 80006ae:	4618      	mov	r0, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	7c3a      	ldrb	r2, [r7, #16]
 80006b6:	4301      	orrs	r1, r0
 80006b8:	3208      	adds	r2, #8
 80006ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    }

}
 80006be:	bf00      	nop
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40013800 	.word	0x40013800
 80006d0:	40013c00 	.word	0x40013c00

080006d4 <GPIO_PeriClockControl>:
 *
 * @Note              -  none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80006e0:	78fb      	ldrb	r3, [r7, #3]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d157      	bne.n	8000796 <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4a59      	ldr	r2, [pc, #356]	; (8000850 <GPIO_PeriClockControl+0x17c>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d106      	bne.n	80006fc <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80006ee:	4b59      	ldr	r3, [pc, #356]	; (8000854 <GPIO_PeriClockControl+0x180>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a58      	ldr	r2, [pc, #352]	; (8000854 <GPIO_PeriClockControl+0x180>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
					GPIOH_PCLK_DIS();
				}

	}

}
 80006fa:	e0a3      	b.n	8000844 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a56      	ldr	r2, [pc, #344]	; (8000858 <GPIO_PeriClockControl+0x184>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d106      	bne.n	8000712 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000704:	4b53      	ldr	r3, [pc, #332]	; (8000854 <GPIO_PeriClockControl+0x180>)
 8000706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000708:	4a52      	ldr	r2, [pc, #328]	; (8000854 <GPIO_PeriClockControl+0x180>)
 800070a:	f043 0302 	orr.w	r3, r3, #2
 800070e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000710:	e098      	b.n	8000844 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4a51      	ldr	r2, [pc, #324]	; (800085c <GPIO_PeriClockControl+0x188>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d106      	bne.n	8000728 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800071a:	4b4e      	ldr	r3, [pc, #312]	; (8000854 <GPIO_PeriClockControl+0x180>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a4d      	ldr	r2, [pc, #308]	; (8000854 <GPIO_PeriClockControl+0x180>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000726:	e08d      	b.n	8000844 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a4d      	ldr	r2, [pc, #308]	; (8000860 <GPIO_PeriClockControl+0x18c>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d106      	bne.n	800073e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000730:	4b48      	ldr	r3, [pc, #288]	; (8000854 <GPIO_PeriClockControl+0x180>)
 8000732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000734:	4a47      	ldr	r2, [pc, #284]	; (8000854 <GPIO_PeriClockControl+0x180>)
 8000736:	f043 0308 	orr.w	r3, r3, #8
 800073a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800073c:	e082      	b.n	8000844 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a48      	ldr	r2, [pc, #288]	; (8000864 <GPIO_PeriClockControl+0x190>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d106      	bne.n	8000754 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000746:	4b43      	ldr	r3, [pc, #268]	; (8000854 <GPIO_PeriClockControl+0x180>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a42      	ldr	r2, [pc, #264]	; (8000854 <GPIO_PeriClockControl+0x180>)
 800074c:	f043 0310 	orr.w	r3, r3, #16
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000752:	e077      	b.n	8000844 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a44      	ldr	r2, [pc, #272]	; (8000868 <GPIO_PeriClockControl+0x194>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d106      	bne.n	800076a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800075c:	4b3d      	ldr	r3, [pc, #244]	; (8000854 <GPIO_PeriClockControl+0x180>)
 800075e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000760:	4a3c      	ldr	r2, [pc, #240]	; (8000854 <GPIO_PeriClockControl+0x180>)
 8000762:	f043 0320 	orr.w	r3, r3, #32
 8000766:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000768:	e06c      	b.n	8000844 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4a3f      	ldr	r2, [pc, #252]	; (800086c <GPIO_PeriClockControl+0x198>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d106      	bne.n	8000780 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000772:	4b38      	ldr	r3, [pc, #224]	; (8000854 <GPIO_PeriClockControl+0x180>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a37      	ldr	r2, [pc, #220]	; (8000854 <GPIO_PeriClockControl+0x180>)
 8000778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800077e:	e061      	b.n	8000844 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a3b      	ldr	r2, [pc, #236]	; (8000870 <GPIO_PeriClockControl+0x19c>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d15d      	bne.n	8000844 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000788:	4b32      	ldr	r3, [pc, #200]	; (8000854 <GPIO_PeriClockControl+0x180>)
 800078a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078c:	4a31      	ldr	r2, [pc, #196]	; (8000854 <GPIO_PeriClockControl+0x180>)
 800078e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000792:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000794:	e056      	b.n	8000844 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4a2d      	ldr	r2, [pc, #180]	; (8000850 <GPIO_PeriClockControl+0x17c>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d106      	bne.n	80007ac <GPIO_PeriClockControl+0xd8>
					GPIOA_PCLK_DIS();
 800079e:	4b2d      	ldr	r3, [pc, #180]	; (8000854 <GPIO_PeriClockControl+0x180>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a2c      	ldr	r2, [pc, #176]	; (8000854 <GPIO_PeriClockControl+0x180>)
 80007a4:	f023 0301 	bic.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007aa:	e04b      	b.n	8000844 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == GPIOB)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4a2a      	ldr	r2, [pc, #168]	; (8000858 <GPIO_PeriClockControl+0x184>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d106      	bne.n	80007c2 <GPIO_PeriClockControl+0xee>
					GPIOB_PCLK_DIS();
 80007b4:	4b27      	ldr	r3, [pc, #156]	; (8000854 <GPIO_PeriClockControl+0x180>)
 80007b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b8:	4a26      	ldr	r2, [pc, #152]	; (8000854 <GPIO_PeriClockControl+0x180>)
 80007ba:	f023 0302 	bic.w	r3, r3, #2
 80007be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007c0:	e040      	b.n	8000844 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == GPIOC)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a25      	ldr	r2, [pc, #148]	; (800085c <GPIO_PeriClockControl+0x188>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d106      	bne.n	80007d8 <GPIO_PeriClockControl+0x104>
					GPIOC_PCLK_DIS();
 80007ca:	4b22      	ldr	r3, [pc, #136]	; (8000854 <GPIO_PeriClockControl+0x180>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a21      	ldr	r2, [pc, #132]	; (8000854 <GPIO_PeriClockControl+0x180>)
 80007d0:	f023 0304 	bic.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007d6:	e035      	b.n	8000844 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == GPIOD)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4a21      	ldr	r2, [pc, #132]	; (8000860 <GPIO_PeriClockControl+0x18c>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d106      	bne.n	80007ee <GPIO_PeriClockControl+0x11a>
					GPIOD_PCLK_DIS();
 80007e0:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <GPIO_PeriClockControl+0x180>)
 80007e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e4:	4a1b      	ldr	r2, [pc, #108]	; (8000854 <GPIO_PeriClockControl+0x180>)
 80007e6:	f023 0308 	bic.w	r3, r3, #8
 80007ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ec:	e02a      	b.n	8000844 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == GPIOE)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a1c      	ldr	r2, [pc, #112]	; (8000864 <GPIO_PeriClockControl+0x190>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d106      	bne.n	8000804 <GPIO_PeriClockControl+0x130>
					GPIOE_PCLK_DIS();
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <GPIO_PeriClockControl+0x180>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a16      	ldr	r2, [pc, #88]	; (8000854 <GPIO_PeriClockControl+0x180>)
 80007fc:	f023 0310 	bic.w	r3, r3, #16
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000802:	e01f      	b.n	8000844 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == GPIOF)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a18      	ldr	r2, [pc, #96]	; (8000868 <GPIO_PeriClockControl+0x194>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d106      	bne.n	800081a <GPIO_PeriClockControl+0x146>
					GPIOF_PCLK_DIS();
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <GPIO_PeriClockControl+0x180>)
 800080e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000810:	4a10      	ldr	r2, [pc, #64]	; (8000854 <GPIO_PeriClockControl+0x180>)
 8000812:	f023 0320 	bic.w	r3, r3, #32
 8000816:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000818:	e014      	b.n	8000844 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == GPIOG)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4a13      	ldr	r2, [pc, #76]	; (800086c <GPIO_PeriClockControl+0x198>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d106      	bne.n	8000830 <GPIO_PeriClockControl+0x15c>
					GPIOG_PCLK_DIS();
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <GPIO_PeriClockControl+0x180>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <GPIO_PeriClockControl+0x180>)
 8000828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800082e:	e009      	b.n	8000844 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx == GPIOH)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a0f      	ldr	r2, [pc, #60]	; (8000870 <GPIO_PeriClockControl+0x19c>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d105      	bne.n	8000844 <GPIO_PeriClockControl+0x170>
					GPIOH_PCLK_DIS();
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <GPIO_PeriClockControl+0x180>)
 800083a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083c:	4a05      	ldr	r2, [pc, #20]	; (8000854 <GPIO_PeriClockControl+0x180>)
 800083e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000842:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40020000 	.word	0x40020000
 8000854:	40023800 	.word	0x40023800
 8000858:	40020400 	.word	0x40020400
 800085c:	40020800 	.word	0x40020800
 8000860:	40020c00 	.word	0x40020c00
 8000864:	40021000 	.word	0x40021000
 8000868:	40021400 	.word	0x40021400
 800086c:	40021800 	.word	0x40021800
 8000870:	40021c00 	.word	0x40021c00

08000874 <GPIO_ReadFromInputPin>:
 * @return            -   0 or 1
 *
 * @Note              -
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	460b      	mov	r3, r1
 800087e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
    value = (uint8_t)(pGPIOx->IDR >> PinNumber) & 0x00000001;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	691a      	ldr	r2, [r3, #16]
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	fa22 f303 	lsr.w	r3, r2, r3
 800088a:	b2db      	uxtb	r3, r3
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	73fb      	strb	r3, [r7, #15]
    return value;
 8000892:	7bfb      	ldrb	r3, [r7, #15]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
	...

080008a0 <RCC_GetPCLK1Value>:

uint16_t AHB_PreScaler[8] = {2, 4, 8, 16, 64, 128, 256, 512};
uint8_t APB1_PreScaler[4] = {2, 4, 8, 16};

uint32_t RCC_GetPCLK1Value(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	uint8_t clksrc, temp, ahbp, apb1p;

	//calculate system clock source
	clksrc = ((RCC->CFGR >>2) & 0x3);
 80008a6:	4b26      	ldr	r3, [pc, #152]	; (8000940 <RCC_GetPCLK1Value+0xa0>)
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	089b      	lsrs	r3, r3, #2
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	f003 0303 	and.w	r3, r3, #3
 80008b2:	727b      	strb	r3, [r7, #9]
	if(clksrc == 0)
 80008b4:	7a7b      	ldrb	r3, [r7, #9]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d102      	bne.n	80008c0 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 80008ba:	4b22      	ldr	r3, [pc, #136]	; (8000944 <RCC_GetPCLK1Value+0xa4>)
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	e00b      	b.n	80008d8 <RCC_GetPCLK1Value+0x38>
	else if(clksrc == 1)
 80008c0:	7a7b      	ldrb	r3, [r7, #9]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d102      	bne.n	80008cc <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 80008c6:	4b20      	ldr	r3, [pc, #128]	; (8000948 <RCC_GetPCLK1Value+0xa8>)
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	e005      	b.n	80008d8 <RCC_GetPCLK1Value+0x38>
	else if(clksrc == 2)
 80008cc:	7a7b      	ldrb	r3, [r7, #9]
 80008ce:	2b02      	cmp	r3, #2
 80008d0:	d102      	bne.n	80008d8 <RCC_GetPCLK1Value+0x38>
			SystemClk = RCC_GetPLLOutputClock();
 80008d2:	f000 f88d 	bl	80009f0 <RCC_GetPLLOutputClock>
 80008d6:	60f8      	str	r0, [r7, #12]

	//find the value of AHB prescaler
	temp = ((RCC->CFGR >> 4) & 0xF);
 80008d8:	4b19      	ldr	r3, [pc, #100]	; (8000940 <RCC_GetPCLK1Value+0xa0>)
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	091b      	lsrs	r3, r3, #4
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	f003 030f 	and.w	r3, r3, #15
 80008e4:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 80008e6:	7a3b      	ldrb	r3, [r7, #8]
 80008e8:	2b07      	cmp	r3, #7
 80008ea:	d802      	bhi.n	80008f2 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 80008ec:	2301      	movs	r3, #1
 80008ee:	72fb      	strb	r3, [r7, #11]
 80008f0:	e005      	b.n	80008fe <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp - 8];
 80008f2:	7a3b      	ldrb	r3, [r7, #8]
 80008f4:	3b08      	subs	r3, #8
 80008f6:	4a15      	ldr	r2, [pc, #84]	; (800094c <RCC_GetPCLK1Value+0xac>)
 80008f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008fc:	72fb      	strb	r3, [r7, #11]
	}

	//find the value of APB1 prescaler
	temp = ((RCC->CFGR >> 10) & 0x7);
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <RCC_GetPCLK1Value+0xa0>)
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	0a9b      	lsrs	r3, r3, #10
 8000904:	b2db      	uxtb	r3, r3
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	723b      	strb	r3, [r7, #8]
		if(temp < 4)
 800090c:	7a3b      	ldrb	r3, [r7, #8]
 800090e:	2b03      	cmp	r3, #3
 8000910:	d802      	bhi.n	8000918 <RCC_GetPCLK1Value+0x78>
		{
			apb1p = 1;
 8000912:	2301      	movs	r3, #1
 8000914:	72bb      	strb	r3, [r7, #10]
 8000916:	e005      	b.n	8000924 <RCC_GetPCLK1Value+0x84>
		}else
		{
			apb1p = AHB_PreScaler[temp - 4];
 8000918:	7a3b      	ldrb	r3, [r7, #8]
 800091a:	3b04      	subs	r3, #4
 800091c:	4a0b      	ldr	r2, [pc, #44]	; (800094c <RCC_GetPCLK1Value+0xac>)
 800091e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000922:	72bb      	strb	r3, [r7, #10]
		}
		pclk1 = (SystemClk / ahbp) / apb1p;
 8000924:	7afb      	ldrb	r3, [r7, #11]
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	fbb2 f2f3 	udiv	r2, r2, r3
 800092c:	7abb      	ldrb	r3, [r7, #10]
 800092e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000932:	607b      	str	r3, [r7, #4]
		return pclk1;
 8000934:	687b      	ldr	r3, [r7, #4]
}
 8000936:	4618      	mov	r0, r3
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	00f42400 	.word	0x00f42400
 8000948:	007a1200 	.word	0x007a1200
 800094c:	20000400 	.word	0x20000400

08000950 <RCC_GetPCLK2Value>:

uint32_t RCC_GetPCLK2Value(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
		uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 800095a:	4b20      	ldr	r3, [pc, #128]	; (80009dc <RCC_GetPCLK2Value+0x8c>)
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	089b      	lsrs	r3, r3, #2
 8000960:	b2db      	uxtb	r3, r3
 8000962:	f003 0303 	and.w	r3, r3, #3
 8000966:	727b      	strb	r3, [r7, #9]

		uint8_t ahbp,apb2p;

		if(clk_src == 0)
 8000968:	7a7b      	ldrb	r3, [r7, #9]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d102      	bne.n	8000974 <RCC_GetPCLK2Value+0x24>
		{
			SystemClock = 16000000;  //HSI oscillator
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <RCC_GetPCLK2Value+0x90>)
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	e001      	b.n	8000978 <RCC_GetPCLK2Value+0x28>
		}else
		{
			SystemClock = 8000000;   //HSE
 8000974:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <RCC_GetPCLK2Value+0x94>)
 8000976:	60fb      	str	r3, [r7, #12]
		}
		tmp = (RCC->CFGR >> 4 ) & 0xF;
 8000978:	4b18      	ldr	r3, [pc, #96]	; (80009dc <RCC_GetPCLK2Value+0x8c>)
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	091b      	lsrs	r3, r3, #4
 800097e:	f003 030f 	and.w	r3, r3, #15
 8000982:	607b      	str	r3, [r7, #4]

		if(tmp < 0x08)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2b07      	cmp	r3, #7
 8000988:	d802      	bhi.n	8000990 <RCC_GetPCLK2Value+0x40>
		{
			ahbp = 1;
 800098a:	2301      	movs	r3, #1
 800098c:	72fb      	strb	r3, [r7, #11]
 800098e:	e005      	b.n	800099c <RCC_GetPCLK2Value+0x4c>
		}else
		{
	       ahbp = AHB_PreScaler[tmp-8];
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3b08      	subs	r3, #8
 8000994:	4a14      	ldr	r2, [pc, #80]	; (80009e8 <RCC_GetPCLK2Value+0x98>)
 8000996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800099a:	72fb      	strb	r3, [r7, #11]
		}

		tmp = (RCC->CFGR >> 13 ) & 0x7;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <RCC_GetPCLK2Value+0x8c>)
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	0b5b      	lsrs	r3, r3, #13
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	607b      	str	r3, [r7, #4]
		if(tmp < 0x04)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b03      	cmp	r3, #3
 80009ac:	d802      	bhi.n	80009b4 <RCC_GetPCLK2Value+0x64>
		{
			apb2p = 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	72bb      	strb	r3, [r7, #10]
 80009b2:	e004      	b.n	80009be <RCC_GetPCLK2Value+0x6e>
		}else
		{
			apb2p = APB1_PreScaler[tmp-4];
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3b04      	subs	r3, #4
 80009b8:	4a0c      	ldr	r2, [pc, #48]	; (80009ec <RCC_GetPCLK2Value+0x9c>)
 80009ba:	5cd3      	ldrb	r3, [r2, r3]
 80009bc:	72bb      	strb	r3, [r7, #10]
		}

		pclk2 = (SystemClock / ahbp )/ apb2p;
 80009be:	7afb      	ldrb	r3, [r7, #11]
 80009c0:	68fa      	ldr	r2, [r7, #12]
 80009c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80009c6:	7abb      	ldrb	r3, [r7, #10]
 80009c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009cc:	603b      	str	r3, [r7, #0]

		return pclk2;
 80009ce:	683b      	ldr	r3, [r7, #0]
	}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800
 80009e0:	00f42400 	.word	0x00f42400
 80009e4:	007a1200 	.word	0x007a1200
 80009e8:	20000400 	.word	0x20000400
 80009ec:	20000410 	.word	0x20000410

080009f0 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

	return 0;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr
	...

08000a00 <USART_SetBaudRate>:
 *
 * @Note              -  Resolve all the TODOs

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variable to hold Mantissa and Fraction values
	uint32_t M_part, F_part;

	uint32_t tempreg = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]

	//Get the value of APB bus Clock in the variable PCLKx
	if(pUSARTx == USART1 || pUSARTx == USART6)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a31      	ldr	r2, [pc, #196]	; (8000ad8 <USART_SetBaudRate+0xd8>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d003      	beq.n	8000a1e <USART_SetBaudRate+0x1e>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a30      	ldr	r2, [pc, #192]	; (8000adc <USART_SetBaudRate+0xdc>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d103      	bne.n	8000a26 <USART_SetBaudRate+0x26>
	{
		//USART1 and USART6 are hanging on APB2
		PCLKx = RCC_GetPCLK2Value();
 8000a1e:	f7ff ff97 	bl	8000950 <RCC_GetPCLK2Value>
 8000a22:	61f8      	str	r0, [r7, #28]
 8000a24:	e002      	b.n	8000a2c <USART_SetBaudRate+0x2c>
	}else
	{
		PCLKx = RCC_GetPCLK1Value();
 8000a26:	f7ff ff3b 	bl	80008a0 <RCC_GetPCLK1Value>
 8000a2a:	61f8      	str	r0, [r7, #28]
	}

	//Check for OVER8 configuration bit
	if(pUSARTx->CR1 & (USART_CR1_OVER8))
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	f003 030f 	and.w	r3, r3, #15
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d00b      	beq.n	8000a50 <USART_SetBaudRate+0x50>
	{
		//OVER8 = 1,  oversampling by 8
		usartdiv = ((25 * PCLKx) / (2 * BaudRate));
 8000a38:	69fa      	ldr	r2, [r7, #28]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	4413      	add	r3, r2
 8000a40:	009a      	lsls	r2, r3, #2
 8000a42:	441a      	add	r2, r3
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4c:	61bb      	str	r3, [r7, #24]
 8000a4e:	e00a      	b.n	8000a66 <USART_SetBaudRate+0x66>
	}else
	{
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8000a50:	69fa      	ldr	r2, [r7, #28]
 8000a52:	4613      	mov	r3, r2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	4413      	add	r3, r2
 8000a58:	009a      	lsls	r2, r3, #2
 8000a5a:	441a      	add	r2, r3
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a64:	61bb      	str	r3, [r7, #24]
	}

	//calculate Mantissa part
	M_part = usartdiv/100;
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	4a1d      	ldr	r2, [pc, #116]	; (8000ae0 <USART_SetBaudRate+0xe0>)
 8000a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6e:	095b      	lsrs	r3, r3, #5
 8000a70:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << 4;
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	011b      	lsls	r3, r3, #4
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2264      	movs	r2, #100	; 0x64
 8000a80:	fb02 f303 	mul.w	r3, r2, r3
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	617b      	str	r3, [r7, #20]

	//Calculate the final fractional
	  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d00a      	beq.n	8000aac <USART_SetBaudRate+0xac>
	   {
		  //OVER8 = 1 , over sampling by 8 , DIV_Fraction3 bit is not considered and must be kept cleared.
		  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	00db      	lsls	r3, r3, #3
 8000a9a:	3332      	adds	r3, #50	; 0x32
 8000a9c:	4a10      	ldr	r2, [pc, #64]	; (8000ae0 <USART_SetBaudRate+0xe0>)
 8000a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa2:	095b      	lsrs	r3, r3, #5
 8000aa4:	f003 0307 	and.w	r3, r3, #7
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	e009      	b.n	8000ac0 <USART_SetBaudRate+0xc0>

	   }else
	   {
		   //over sampling by 16
		   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	011b      	lsls	r3, r3, #4
 8000ab0:	3332      	adds	r3, #50	; 0x32
 8000ab2:	4a0b      	ldr	r2, [pc, #44]	; (8000ae0 <USART_SetBaudRate+0xe0>)
 8000ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab8:	095b      	lsrs	r3, r3, #5
 8000aba:	f003 030f 	and.w	r3, r3, #15
 8000abe:	617b      	str	r3, [r7, #20]

	   }

	  //Place the fractional part in appropriate bit position . refer USART_BRR
	  tempreg |= F_part;
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]

	  //copy the value of tempreg in to BRR register
	  pUSARTx->BRR = tempreg;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	609a      	str	r2, [r3, #8]

}
 8000ace:	bf00      	nop
 8000ad0:	3720      	adds	r7, #32
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40011000 	.word	0x40011000
 8000adc:	40011400 	.word	0x40011400
 8000ae0:	51eb851f 	.word	0x51eb851f

08000ae4 <USART_PeripheralControl>:
 * @return            -
 *
 * @Note              -
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx,uint8_t EnorDi)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	460b      	mov	r3, r1
 8000aee:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000af0:	78fb      	ldrb	r3, [r7, #3]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d106      	bne.n	8000b04 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	60da      	str	r2, [r3, #12]
	}else
	{
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}

}
 8000b02:	e005      	b.n	8000b10 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	60da      	str	r2, [r3, #12]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
	...

08000b1c <USART_PeriClockControl>:
 * @return            -
 *
 * @Note              -
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000b28:	78fb      	ldrb	r3, [r7, #3]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d141      	bne.n	8000bb2 <USART_PeriClockControl+0x96>
	{
		if(pUSARTx == USART1)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a43      	ldr	r2, [pc, #268]	; (8000c40 <USART_PeriClockControl+0x124>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d106      	bne.n	8000b44 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8000b36:	4b43      	ldr	r3, [pc, #268]	; (8000c44 <USART_PeriClockControl+0x128>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	4a42      	ldr	r2, [pc, #264]	; (8000c44 <USART_PeriClockControl+0x128>)
 8000b3c:	f043 0310 	orr.w	r3, r3, #16
 8000b40:	6453      	str	r3, [r2, #68]	; 0x44
		{
			USART6_PCLK_DIS();
		}

	}
}
 8000b42:	e077      	b.n	8000c34 <USART_PeriClockControl+0x118>
		}else if (pUSARTx == USART2)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a40      	ldr	r2, [pc, #256]	; (8000c48 <USART_PeriClockControl+0x12c>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d106      	bne.n	8000b5a <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000b4c:	4b3d      	ldr	r3, [pc, #244]	; (8000c44 <USART_PeriClockControl+0x128>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	4a3c      	ldr	r2, [pc, #240]	; (8000c44 <USART_PeriClockControl+0x128>)
 8000b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b56:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b58:	e06c      	b.n	8000c34 <USART_PeriClockControl+0x118>
		}else if (pUSARTx == USART3)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a3b      	ldr	r2, [pc, #236]	; (8000c4c <USART_PeriClockControl+0x130>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d106      	bne.n	8000b70 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000b62:	4b38      	ldr	r3, [pc, #224]	; (8000c44 <USART_PeriClockControl+0x128>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	4a37      	ldr	r2, [pc, #220]	; (8000c44 <USART_PeriClockControl+0x128>)
 8000b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b6c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b6e:	e061      	b.n	8000c34 <USART_PeriClockControl+0x118>
		}else if (pUSARTx == UART4)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a37      	ldr	r2, [pc, #220]	; (8000c50 <USART_PeriClockControl+0x134>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d106      	bne.n	8000b86 <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000b78:	4b32      	ldr	r3, [pc, #200]	; (8000c44 <USART_PeriClockControl+0x128>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	4a31      	ldr	r2, [pc, #196]	; (8000c44 <USART_PeriClockControl+0x128>)
 8000b7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b82:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b84:	e056      	b.n	8000c34 <USART_PeriClockControl+0x118>
		}else if (pUSARTx == UART5)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a32      	ldr	r2, [pc, #200]	; (8000c54 <USART_PeriClockControl+0x138>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d106      	bne.n	8000b9c <USART_PeriClockControl+0x80>
			UART5_PCLK_EN();
 8000b8e:	4b2d      	ldr	r3, [pc, #180]	; (8000c44 <USART_PeriClockControl+0x128>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	4a2c      	ldr	r2, [pc, #176]	; (8000c44 <USART_PeriClockControl+0x128>)
 8000b94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b98:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b9a:	e04b      	b.n	8000c34 <USART_PeriClockControl+0x118>
		}else if (pUSARTx == USART6)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a2e      	ldr	r2, [pc, #184]	; (8000c58 <USART_PeriClockControl+0x13c>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d147      	bne.n	8000c34 <USART_PeriClockControl+0x118>
			USART6_PCLK_EN();
 8000ba4:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <USART_PeriClockControl+0x128>)
 8000ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba8:	4a26      	ldr	r2, [pc, #152]	; (8000c44 <USART_PeriClockControl+0x128>)
 8000baa:	f043 0320 	orr.w	r3, r3, #32
 8000bae:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000bb0:	e040      	b.n	8000c34 <USART_PeriClockControl+0x118>
		if(pUSARTx == USART1)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a22      	ldr	r2, [pc, #136]	; (8000c40 <USART_PeriClockControl+0x124>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d106      	bne.n	8000bc8 <USART_PeriClockControl+0xac>
			USART1_PCLK_DIS();
 8000bba:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <USART_PeriClockControl+0x128>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	4a21      	ldr	r2, [pc, #132]	; (8000c44 <USART_PeriClockControl+0x128>)
 8000bc0:	f023 0310 	bic.w	r3, r3, #16
 8000bc4:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000bc6:	e035      	b.n	8000c34 <USART_PeriClockControl+0x118>
		}else if (pUSARTx == USART2)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a1f      	ldr	r2, [pc, #124]	; (8000c48 <USART_PeriClockControl+0x12c>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d106      	bne.n	8000bde <USART_PeriClockControl+0xc2>
			USART2_PCLK_DIS();
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <USART_PeriClockControl+0x128>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	4a1b      	ldr	r2, [pc, #108]	; (8000c44 <USART_PeriClockControl+0x128>)
 8000bd6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000bda:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bdc:	e02a      	b.n	8000c34 <USART_PeriClockControl+0x118>
		}else if (pUSARTx == USART3)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a1a      	ldr	r2, [pc, #104]	; (8000c4c <USART_PeriClockControl+0x130>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d106      	bne.n	8000bf4 <USART_PeriClockControl+0xd8>
			USART3_PCLK_DIS();
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <USART_PeriClockControl+0x128>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	4a16      	ldr	r2, [pc, #88]	; (8000c44 <USART_PeriClockControl+0x128>)
 8000bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bf0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bf2:	e01f      	b.n	8000c34 <USART_PeriClockControl+0x118>
		}else if (pUSARTx == UART4)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a16      	ldr	r2, [pc, #88]	; (8000c50 <USART_PeriClockControl+0x134>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d106      	bne.n	8000c0a <USART_PeriClockControl+0xee>
			UART4_PCLK_DIS();
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <USART_PeriClockControl+0x128>)
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	4a10      	ldr	r2, [pc, #64]	; (8000c44 <USART_PeriClockControl+0x128>)
 8000c02:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000c06:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c08:	e014      	b.n	8000c34 <USART_PeriClockControl+0x118>
		}else if (pUSARTx == UART5)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a11      	ldr	r2, [pc, #68]	; (8000c54 <USART_PeriClockControl+0x138>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d106      	bne.n	8000c20 <USART_PeriClockControl+0x104>
			UART5_PCLK_DIS();
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <USART_PeriClockControl+0x128>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <USART_PeriClockControl+0x128>)
 8000c18:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000c1c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c1e:	e009      	b.n	8000c34 <USART_PeriClockControl+0x118>
		}else if (pUSARTx == USART6)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <USART_PeriClockControl+0x13c>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d105      	bne.n	8000c34 <USART_PeriClockControl+0x118>
			USART6_PCLK_DIS();
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <USART_PeriClockControl+0x128>)
 8000c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2c:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <USART_PeriClockControl+0x128>)
 8000c2e:	f023 0320 	bic.w	r3, r3, #32
 8000c32:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40011000 	.word	0x40011000
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40004400 	.word	0x40004400
 8000c4c:	40004800 	.word	0x40004800
 8000c50:	40004c00 	.word	0x40004c00
 8000c54:	40005000 	.word	0x40005000
 8000c58:	40011400 	.word	0x40011400

08000c5c <USART_Init>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	//Temporary variable
	uint32_t tempreg=0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff ff54 	bl	8000b1c <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	791b      	ldrb	r3, [r3, #4]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d104      	bne.n	8000c86 <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f043 0304 	orr.w	r3, r3, #4
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	e010      	b.n	8000ca8 <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	791b      	ldrb	r3, [r3, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d104      	bne.n	8000c98 <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	f043 0308 	orr.w	r3, r3, #8
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	e007      	b.n	8000ca8 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	791b      	ldrb	r3, [r3, #4]
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d103      	bne.n	8000ca8 <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_TE) | ( 1 << USART_CR1_RE) );
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f043 030c 	orr.w	r3, r3, #12
 8000ca6:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	7b5b      	ldrb	r3, [r3, #13]
 8000cac:	031b      	lsls	r3, r3, #12
 8000cae:	461a      	mov	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	7b9b      	ldrb	r3, [r3, #14]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d104      	bne.n	8000cc8 <USART_Init+0x6c>
	{
		//Implement the code to enale the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	e00b      	b.n	8000ce0 <USART_Init+0x84>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	7b9b      	ldrb	r3, [r3, #14]
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d107      	bne.n	8000ce0 <USART_Init+0x84>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd6:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cde:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	7b1b      	ldrb	r3, [r3, #12]
 8000cf0:	031b      	lsls	r3, r3, #12
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	7bdb      	ldrb	r3, [r3, #15]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d104      	bne.n	8000d18 <USART_Init+0xbc>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	e010      	b.n	8000d3a <USART_Init+0xde>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	7bdb      	ldrb	r3, [r3, #15]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d104      	bne.n	8000d2a <USART_Init+0xce>
	{
		//Implement the code to enable RTS flow control
		tempreg |= (1 << USART_CR3_RTSE);
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	e007      	b.n	8000d3a <USART_Init+0xde>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	7bdb      	ldrb	r3, [r3, #15]
 8000d2e:	2b03      	cmp	r3, #3
 8000d30:	d103      	bne.n	8000d3a <USART_Init+0xde>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( (1 << USART_CR3_CTSE) | (1 << USART_CR3_RTSE) );
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000d38:	60fb      	str	r3, [r7, #12]
	}

	//Program the CR1 register
	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4610      	mov	r0, r2
 8000d4e:	f7ff fe57 	bl	8000a00 <USART_SetBaudRate>
}
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <USART_GetFlagStatus>:

uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx , uint8_t FlagName)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	460b      	mov	r3, r1
 8000d64:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx->SR & FlagName)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	78fb      	ldrb	r3, [r7, #3]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <USART_GetFlagStatus+0x1c>
	{
		return SET;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e000      	b.n	8000d78 <USART_GetFlagStatus+0x1e>
	}

	return RESET;
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr

08000d82 <USART_SendData>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	e031      	b.n	8000df8 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000d94:	bf00      	nop
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2180      	movs	r1, #128	; 0x80
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ffdc 	bl	8000d5a <USART_GetFlagStatus>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0f6      	beq.n	8000d96 <USART_SendData+0x14>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	7b5b      	ldrb	r3, [r3, #13]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d118      	bne.n	8000de2 <USART_SendData+0x60>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000dc2:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	7b9b      	ldrb	r3, [r3, #14]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d106      	bne.n	8000dda <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	e00b      	b.n	8000df2 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	e007      	b.n	8000df2 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	781a      	ldrb	r2, [r3, #0]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	3301      	adds	r3, #1
 8000df0:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	3301      	adds	r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d3c9      	bcc.n	8000d94 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000e00:	bf00      	nop
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2140      	movs	r1, #64	; 0x40
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ffa6 	bl	8000d5a <USART_GetFlagStatus>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0f6      	beq.n	8000e02 <USART_SendData+0x80>
}
 8000e14:	bf00      	nop
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <__libc_init_array>:
 8000e1c:	b570      	push	{r4, r5, r6, lr}
 8000e1e:	4e0d      	ldr	r6, [pc, #52]	; (8000e54 <__libc_init_array+0x38>)
 8000e20:	4c0d      	ldr	r4, [pc, #52]	; (8000e58 <__libc_init_array+0x3c>)
 8000e22:	1ba4      	subs	r4, r4, r6
 8000e24:	10a4      	asrs	r4, r4, #2
 8000e26:	2500      	movs	r5, #0
 8000e28:	42a5      	cmp	r5, r4
 8000e2a:	d109      	bne.n	8000e40 <__libc_init_array+0x24>
 8000e2c:	4e0b      	ldr	r6, [pc, #44]	; (8000e5c <__libc_init_array+0x40>)
 8000e2e:	4c0c      	ldr	r4, [pc, #48]	; (8000e60 <__libc_init_array+0x44>)
 8000e30:	f000 f818 	bl	8000e64 <_init>
 8000e34:	1ba4      	subs	r4, r4, r6
 8000e36:	10a4      	asrs	r4, r4, #2
 8000e38:	2500      	movs	r5, #0
 8000e3a:	42a5      	cmp	r5, r4
 8000e3c:	d105      	bne.n	8000e4a <__libc_init_array+0x2e>
 8000e3e:	bd70      	pop	{r4, r5, r6, pc}
 8000e40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e44:	4798      	blx	r3
 8000e46:	3501      	adds	r5, #1
 8000e48:	e7ee      	b.n	8000e28 <__libc_init_array+0xc>
 8000e4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e4e:	4798      	blx	r3
 8000e50:	3501      	adds	r5, #1
 8000e52:	e7f2      	b.n	8000e3a <__libc_init_array+0x1e>
 8000e54:	08000e7c 	.word	0x08000e7c
 8000e58:	08000e7c 	.word	0x08000e7c
 8000e5c:	08000e7c 	.word	0x08000e7c
 8000e60:	08000e80 	.word	0x08000e80

08000e64 <_init>:
 8000e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e66:	bf00      	nop
 8000e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e6a:	bc08      	pop	{r3}
 8000e6c:	469e      	mov	lr, r3
 8000e6e:	4770      	bx	lr

08000e70 <_fini>:
 8000e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e72:	bf00      	nop
 8000e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e76:	bc08      	pop	{r3}
 8000e78:	469e      	mov	lr, r3
 8000e7a:	4770      	bx	lr
